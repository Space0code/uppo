package uppo;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.border.*;

public class uppo_003 extends javax.swing.JFrame {	// extends javax.swing.JFrame je zato, ker drugace 
													// new uppo_003().setVisible(true); ne dela
	
    public uppo_003() {
    	init();
    }
    
    public void init() {
    	ponastaviSpremenljivke();
    	ustvariZacetnoOkno();
    }
    
    private void ponastaviSpremenljivke() {
    	naslov = "";
    	font = "Helvetica";
    	glava = new String[2]; 
    	glava[0] = "Naslov kategorije (npr. cena)";
    	glava[1] = "Izberi vrsto podatka";
    	//glava[2] = "Izberi";
	/*  prazna[]	se inicializira kasneje
    	kategorije[][];	se inicializira kasneje 
    	naslovi_kategorij[]; se inicializira kasneje 
    	besede[][][]; se inicializira kasneje  */
    	st_kat = -1;
    	st_bes_kat = 0;
        sirina_okna = 800;
        visina_okna = 600;
    }
    
    private void ustvariZacetnoOkno() {
    	ustvariOkvir();
    	ustvariZacZaslon();
    	ustvariDobrodosel();
    	ustvariUstvariNovBtn();
    	ustvariPreglejBtn();  	
    }
    
    public void ustvariOkvir() {
    	okvir = new JFrame("Univerzalni program za podporo odloèanju");
    	okvir.setSize(sirina_okna, visina_okna);
    	okvir.setPreferredSize(new Dimension(sirina_okna, visina_okna));
    	okvir.setMinimumSize(new Dimension(sirina_okna, visina_okna));
    	okvir.setMaximumSize(new Dimension(sirina_okna, visina_okna));
    	postaviFrameNaSredino(okvir);
    	okvir.getContentPane().setBackground(Color.gray);
    	okvir.setVisible(true);
    	okvir.pack();
    	okvir.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    }    
    
    public void ustvariZacZaslon() {
    	jZacZaslon = new JPanel(new GridBagLayout());
    	jZacZaslon.setBackground(Color.gray);
    	jZacZaslon.setBorder(BorderFactory.createTitledBorder( BorderFactory.createEtchedBorder(), "UPPO", TitledBorder.CENTER, TitledBorder.TOP, new Font(font,Font.PLAIN,14), Color.black));
    	
    	// zato, da lahko dodam addKeyListener na jpanel za pritisk tipke enter 
    	jZacZaslon.addKeyListener(new KeyListener() {
			@Override
			public void keyTyped(KeyEvent e) {}

			@Override
			public void keyReleased(KeyEvent e) {}
			
			@Override 
    		public void keyPressed(KeyEvent e) {
    			System.out.println(e);
    			if (e.getKeyCode() == 10)	// Enter pritisnjen
    				ustvariNovSprozen();
    		}
    	});
    	
    	jZacZaslon.setFocusable(true);
    	jZacZaslon.requestFocusInWindow();
    	
    	okvir.add(jZacZaslon, BorderLayout.CENTER);
    	skrijVseZaslone();
    	jZacZaslon.setVisible(true);
    	okvir.setVisible(true);
    }

    public void  ustvariPoizZaslon1() {	// zaslon za poizvedovanje o naslovih kategorij ter ali so vrednosti posamezne kategorije številske ali besedne
    	jPoizZaslon1 = new JPanel(new GridBagLayout());
    	jPoizZaslon1.setBackground(Color.darkGray);
    	jPoizZaslon1.setBorder(BorderFactory.createTitledBorder( BorderFactory.createEtchedBorder(), naslov.toUpperCase(), TitledBorder.CENTER, TitledBorder.TOP, new Font(font,Font.PLAIN,14), Color.white));
    	okvir.add(jPoizZaslon1, BorderLayout.CENTER);
    	skrijVseZaslone();
    	jPoizZaslon1.setVisible(true);
    	okvir.setVisible(true);
    }
    
    public void ustvariPoizZaslon2() {	// zaslon za poizvedovanje o besednih vrednostih kategorij
    	jPoizZaslon2 = new JPanel(new GridBagLayout());
    	jPoizZaslon2.setBackground(Color.darkGray);
    	jPoizZaslon2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), naslov.toUpperCase(), TitledBorder.CENTER, TitledBorder.TOP, new Font(font, Font.PLAIN, 14), Color.white));
    	okvir.add(jPoizZaslon2, BorderLayout.CENTER);
    	skrijVseZaslone();
    	jPoizZaslon2.setVisible(true);
    	okvir.setVisible(true);
    }
    
    private void ustvariPoizZaslon3() {	// zaslon za poizvedovanje o dejanskih vrednosti 
    									// zaslon s tabelo, v katero bo uporabnik vpisoval dejanske parametre
    	jPoizZaslon3 = new Zaslon(Color.darkGray, naslov, font);
    	okvir.add(jPoizZaslon3.zaslon(), BorderLayout.CENTER);
    	skrijVseZaslone();
    	jPoizZaslon3.pokazi();
    	okvir.setVisible(true);    	
    }
    
    public static void skrijVseZaslone() {
    	try{ jZacZaslon.setVisible(false); } catch (Exception e) {}
    	try{ jPoizZaslon1.setVisible(false); } catch (Exception e) {}
    	try{ jPoizZaslon2.setVisible(false); } catch (Exception e) {}
    	try{ jPoizZaslon3.setVisible(false); } catch (Exception e) {}
    	try{ jPoizZaslon3.skrij(); } catch (Exception e) {}
    	
    	
    }

    public void ustvariDobrodosel() {
    	jDobrodosel = new JLabel("Dobrodošel!");
    	jDobrodosel.setFont(new Font(font, Font.CENTER_BASELINE, 24));
    	jDobrodosel.setForeground(Color.white);
    	//jDobrodosel.setBounds(350, 20, 100, 30);
    	GridBagConstraints c = new GridBagConstraints();
    	//c.fill = GridBagConstraints.HORIZONTAL;
    	c.gridwidth = 1;
    	c.gridheight = 1;
    	c.gridx = 1;
    	c.gridy = 0;
    	c.weighty = 10;
    	/*c.gridx = 0;
    	c.gridy = 0;*/
    	//c.anchor = GridBagConstraints.PAGE_START;
    	jZacZaslon.add(jDobrodosel, c);
    }
    
    public void ustvariUstvariNovBtn() {
    	jUstvariNovBtn = new JButton("Ustvari nov odloèevalni model");
    	//jUstvariNovBtn.setBounds(50, 350, 80, 40);
    	GridBagConstraints c = new GridBagConstraints();
    	//c.fill = GridBagConstraints.HORIZONTAL;
    	c.gridwidth = 1;
    	c.gridheight = 1;
    	c.gridx = 0;
    	c.gridy = 1;
    	c.weighty = 200;
    	c.ipady = 30;
    	/*c.ipady = 40;      //make this component tall
    	c.weightx = 0.0;
    	c.gridwidth = 3;
    	c.gridx = 0;
    	c.gridy = 1;*/
    	//c.anchor = GridBagConstraints.LINE_START;

    	jZacZaslon.add(jUstvariNovBtn, c);
    	
    	// gumb posluša kdaj bo kliknjen
    	jUstvariNovBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jUstvariNovMousePressed(evt);
            }
        });
    }
    
    public void ustvariPreglejBtn() {
    	jPreglejBtn = new JButton("Preglej dozdajšnje modele");   	
    	jPreglejBtn.setBounds(sirina_okna-50-80, 350, 80, 40);
    	GridBagConstraints c = new GridBagConstraints();
    	//c.fill = GridBagConstraints.HORIZONTAL;
    	c.gridwidth = 1;
    	c.gridheight = 1;
    	c.gridx = 2;
    	c.gridy = 1;
    	c.weighty = 200;
    	c.ipady = 30;
    	jZacZaslon.add(jPreglejBtn, c);
    }
    
    public void ustvariPotrdiBtn() {
    	jPotrdiBtn = new JButton("Potrdi vnos besed");
    	//jPotrdiBtn.setBounds(1, 1, 1, 1);
    	//jPotrdiBtn.setAlignmentX(Component.CENTER_ALIGNMENT);
    	jPoizZaslon1.add(Box.createRigidArea(new Dimension(200, 100)));
    	GridBagConstraints c = new GridBagConstraints();

    	//c.gridwidth = 1;
    	//c.gridheight = 1;
    	c.gridx = 0;
    	c.gridy = 1;
    	c.weightx = 0.1;
    	c.weighty = 1.0;
    	c.ipady = 15;
    	c.ipadx = 60;
    	c.insets = new Insets(0,0,0,0);
    	c.anchor = GridBagConstraints.CENTER;
    	//c.fill = GridBagConstraints.BOTH;
    	c.fill = GridBagConstraints.HORIZONTAL;
    	jPoizZaslon1.add(jPotrdiBtn, c);
    	
    	// gumb posluša kdaj bo kliknjen
    	jPotrdiBtn.addMouseListener(new java.awt.event.MouseAdapter() {
    		public void mousePressed(java.awt.event.MouseEvent evt) {
    			jPotrdiBtnMousePressed(evt);
    		}
    	});
    }
    
    public void ustvariPotrdi2Btn() {	// to metodo bo možno odstraniti, ker je lahko samo en jPotrdiBtn
    	jPotrdi2Btn = new JButton("Potrdi vnos besed");
    	//jPoizZaslon2.add(Box.createRigidArea(new Dimension(200, 100)));
    	jPoizZaslon2.add(jPotrdi2Btn);
    	jPotrdi2Btn.addMouseListener(new java.awt.event.MouseAdapter() {
    		public void mousePressed(java.awt.event.MouseEvent evt) {
    			jPotrdi2BtnMousePressed(evt);
    		}
    	});
    }
    
    public void ustvariPrekliciBtn() {
    	jPrekliciBtn = new JButton("Preklièi");
    	GridBagConstraints c = new GridBagConstraints();

    	//c.gridwidth = 1;
    	//c.gridheight = 1;
    	c.gridx = 2;
    	c.gridy = 1;
    	c.weightx = 0.1;
    	c.weighty = 1.0;
    	c.ipady = 15;
    	c.ipadx = 60;
    	c.insets = new Insets(0,0,0,0);
    	c.anchor = GridBagConstraints.CENTER;
    	//c.fill = GridBagConstraints.BOTH;
    	c.fill = GridBagConstraints.HORIZONTAL;
    	jPoizZaslon1.add(jPrekliciBtn, c);
    	
    	// gumb posluša kdaj bo kliknjen
    	jPrekliciBtn.addMouseListener(new java.awt.event.MouseAdapter() {
    		public void mousePressed(java.awt.event.MouseEvent evt) {
				preklici1();
    		}
    	});

    }
    
    public void ponastaviTabelaKat() {
    	// vstavi podatke v tabelo
    	jTabelaKat = new JTable(prazna, glava);	
    	jTabelaKat.setModel(new DefaultTableModel(prazna, glava));
    	jTabelaKat = nastaviPrivzeteVrednosi(jTabelaKat);
    	
    	dodajTabeliComboBox(jTabelaKat);
    	dodajTabeliKatKeyListener(jTabelaKat);
    	
    	
    	GridBagConstraints c = new GridBagConstraints();
    	c.gridwidth = 3;
    	c.gridheight = 1;
    	c.gridx = 1;
    	c.gridy = 0;
    	c.weightx= 0.1;
    	c.weighty = 1.0;
    	c.ipadx = 400;
    	c.ipady = 400;
    	c.fill = GridBagConstraints.BOTH;
    	//jPoizZaslon1.add(jTabelaKat, c);  
    	
    	//jTabelaKat.setBounds(50, 50, 400, 300);
    	JScrollPane scrollpane = new JScrollPane(jTabelaKat);
    	scrollpane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), "".toUpperCase(), TitledBorder.CENTER, TitledBorder.TOP, new Font(font, Font.PLAIN, 14), Color.darkGray));
    	jPoizZaslon1.add(scrollpane, c);
    	okvir.add(jPoizZaslon1);
    	jTabelaKat.setVisible(true);
    	okvir.setVisible(true);
    }
    
    
    static void ustvariVnosnaTabela() {    	
    	jTabelaVnosna = new Tabela("vnosna", st_kat, naslovi_kategorij, font);
    	okvir = jTabelaVnosna.pozicioniraj(okvir, jPoizZaslon3);
    	skrijVseZaslone();
    	okvir = jTabelaVnosna.pokazi(okvir, jPoizZaslon3);
    }
    
    public void dodajTabeliComboBox(JTable t) {
    	// comboBox za doloèanje ali vsebuje podatek številsko ali besedno vrednost
    	TableColumn stolpec = t.getColumnModel().getColumn(1);
    	JComboBox comboBox = new JComboBox();
    	comboBox.addItem("številski");
    	comboBox.addItem("besedni");
    	stolpec.setCellEditor(new DefaultCellEditor(comboBox));    	
    }
    
    private void dodajTabeliKatKeyListener(JTable t) {
    	
    	t.addKeyListener(new KeyListener() {
    		@Override
    		public void keyTyped(KeyEvent e) {}
    		
    		@Override
    		public void keyReleased(KeyEvent e) {}
    		
    		@Override
    		public void keyPressed(KeyEvent e) {
    			boolean enter_stisnjen = (e.getKeyCode() == 10); // getKeyCode() == 10 ==> pritisnjen enter
    			if (enter_stisnjen) {
    				dodajVrstico(t);
    				tabuliraj(t);    
    				}
			}
    	});
    }
    
    private void dodajVrstico(JTable t) {
		
		t.editCellAt(t.getSelectedRow(), 1);
		t.editCellAt(t.getSelectedRow(), 0);
		
		boolean besedilo_ni_prazno = ( ( ((String)t.getValueAt(t.getRowCount()-1, 0)).split(" +").length > 0 ) && ( (String)t.getValueAt(t.getRowCount()-1, 0) != "" ) );
		boolean vrsta_oznacena = t.getValueAt(t.getRowCount()-1, 1) != "izberi";
		
		System.out.print( ";" + ((String)t.getValueAt(t.getRowCount()-1, 0)).split(" +").length);
		System.out.println(";" + (String)t.getValueAt(t.getRowCount()-1, 0) + ";");
		System.out.println(";" + besedilo_ni_prazno + ";" + vrsta_oznacena + ";");
		
    	if (besedilo_ni_prazno && vrsta_oznacena) {	
    		System.out.println(t.getValueAt(t.getSelectedRow(), t.getSelectedColumn()));
			DefaultTableModel model = (DefaultTableModel) t.getModel();
			model.addRow(new Object[]{"", "izberi"});
			st_kat = t.getRowCount();

		}
    	
    	System.out.println();
    }
    
    private void tabuliraj(JTable t) {// ! ne dela v redu

		//t.changeSelection(t.getRowCount()-1, 0, false, false);
		t.setCellSelectionEnabled(true);
		
		/*if (t.getSelectedColumn() == 0) 
			t.changeSelection(t.getSelectedRow(), 1, false, false);
		else
			t.changeSelection(t.getSelectedRow()+1, 0, false, false);
		*/
		if (t.getSelectedColumn() == 0) 
			t.editCellAt(t.getSelectedRow(), 1);
		else
			t.editCellAt(t.getSelectedRow()+1, 0);
			
		System.out.println(";" + t.getSelectedRow() + ";" + t.getSelectedColumn() + ";");
		t.setSelectionBackground(Color.cyan);    			
		
    }

    private void ponastaviTabelaBesed() {
    	String glava1[] = {"Zaželjenost", "Besede"};
    	String indeksi_in_prazna[][] = new String[10][2];
    	for (int i = 0; i < 10; i++)
    		indeksi_in_prazna[i][0] = Integer.toString(i+1);
    	
    	// vstavi podatke v tabelo
    	for (int i = 0; i < st_bes_kat; i++) {
    		jTabelaBes[i] = new JTable(indeksi_in_prazna, glava1);
    		jTabelaBes[i] = nastaviPrivzeteVrednosi(jTabelaBes[i]);
    	}
    	
    	//jTabelaBes.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), kategorije[0][0].toUpperCase(), TitledBorder.CENTER, TitledBorder.TOP, new Font(font, Font.PLAIN, 14), Color.green));
    	//jTabelaBes.setBorder(BorderFactory.createEtchedBorder());
    }
    
    private JTable nastaviPrivzeteVrednosi(JTable t) {
    	t.setRowHeight(30);
    	t.setRowMargin(5);
    	t.setFont(new Font(font, Font.PLAIN, 14));
    	t.getTableHeader().setReorderingAllowed(false);	// onemogoèi, da bi uporabnik premikal stolpce tabele
    	t.changeSelection(0, 0, false, false);
    	// tekst v celicah naj bo na sredini
    	DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    	centerRenderer.setHorizontalAlignment( JLabel.CENTER );
    	t.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
    	
    	return t;
    }
    
    public void pokaziTabela(JTable t, JPanel z, String naslov_tabele) {
    	t.setBounds(50, 50, 400, 300);
    	JScrollPane scrollpane = new JScrollPane(t);
    	scrollpane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), naslov_tabele.toUpperCase(), TitledBorder.CENTER, TitledBorder.TOP, new Font(font, Font.PLAIN, 14), Color.darkGray));
    	z.add(scrollpane);
    	okvir.add(z);
    	t.setVisible(true);
    	okvir.setVisible(true);    
    }
    
    public void postaviFrameNaSredino(JFrame object){
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - object.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - object.getHeight()) / 2);        
        object.setLocation(x, y);
    }
    
    public void vnosBesed() {	// poizvedba o besednih vrednosti besednih kategorij
        ustvariPoizZaslon2();
    	ustvariTabeleZaBesedne();
    	initBesede(); 
    	ustvariPotrdi2Btn();
    	
    }	
    
    public void ustvariTabeleZaBesedne() {	
    	// pregleda tabelo kategorije[][] in, èe je kategorija besednega tipa, 
    	// ustvari zanjo tabelo z poizvedbo o besednih kategorijah
    	for (int i = 0; i < kategorije.length; i++) {
    		if (kategorije[i][0] == null)
    			continue;
    		if (kategorije[i][1].equals("besedni")) 
            	st_bes_kat++;
    	}
    	
    	// deklariraj tabelo besed
    	jTabelaBes = new JTable[st_bes_kat];
    	    	
    	int j = 0;
    	for (int i = 0; i < kategorije.length; i++) {
    		if (kategorije[i][0] == null)
    			continue;
    		if (kategorije[i][1].equals("besedni")) {
    			ponastaviTabelaBesed();
    			pokaziTabela(jTabelaBes[j], jPoizZaslon2, kategorije[i][0]);
    			j++;
    		}
    	}
    }
    
    public void preklici1() {
    	skrijVseZaslone();
    	ustvariZacZaslon();
    	ustvariDobrodosel();
    	ustvariUstvariNovBtn();
    	ustvariPreglejBtn();
    }
       
    
    private void jUstvariNovMousePressed(java.awt.event.MouseEvent evt) {                                         
        ustvariNovSprozen();
    } 
    
    
    public void jPotrdiBtnMousePressed(java.awt.event.MouseEvent evt) {
    	shraniTabelaKat();
    	vnosBesed();
    }
    
    public void jPotrdi2BtnMousePressed(java.awt.event.MouseEvent evt) {
    	shraniBesede();
    	izpisiBesede();   	
    	ustvariPoizZaslon3();
    	ustvariVnosnaTabela();
	}
    
    private void shraniBesede() {
    	System.out.println("st_bes_kat = " + st_bes_kat);
    	for (int i = 0; i < st_bes_kat; i++) {	// i = indeks kategorije
        	jTabelaBes[i].editCellAt(0,0);	// fokus kurzorja je treba premakniti strani iz aktivne celice, èe želiš, da se vsebina celice shrani
        	
        	for(int j = 1; j < 11; j++) {	// j = indeks moèi/teže besed v kategoriji
    			try {
    				besede[i][11-j] = ((String) jTabelaBes[i].getValueAt(j-1, 1)).split("[,]+");	//split("[, ]+"); --> èe bi želel še po presledkih

    			} catch (NullPointerException e) {}	// èe je vrednost celice Null
			}
		}
    }    
    	
    
    private void izpisiBesede() {
		// izpis besednih vrednosti
		for (int i = 0; i < st_bes_kat; i++) {	// i = indeks kategorije
			System.out.println(besede[i][0][0]);	// izpiše ime kategorije
			
			for (int j = 1; j < 11; j++) {		// j = indeks moèi/teže besed v kategoriji
				System.out.print(j);
				try {	// drugaèe pride do napake, ko preglejuje dolžino tabele
	    			for (int k = 0; k < besede[i][j].length; k++) {	// k = beseda z moèjo j
	    				System.out.print(besede[i][j][k] + "; ");
	    			} 
				} catch (NullPointerException e) {	// èe v ni vrednosti (besede) za težo j
					System.out.print("; ");	
				}
				System.out.println();
			}
			System.out.println();
		}    	
    }
    
    
    public void ustvariNovSprozen() {
    	try {
    		ponastaviSpremenljivke();
	    	kaksenNaslov();	// uporabink vpiše naslov odloèevalnega sistema
	    	if (naslov == null)	// èe ni vpisal naslova al pa èe je stisnil preklièi... nisem veè ziher :')
	    		return;
	    	initPraznaKategorije();
	        ustvariPoizZaslon1();   
	        ponastaviTabelaKat();
	        //pokaziTabela(jTabelaKat, jPoizZaslon1, ""); --> zaèasno je to v metodi ponastaviTabelaKat
	        ustvariPotrdiBtn();
	        ustvariPrekliciBtn();
    	} catch (Exception e) { System.out.println("Napaka: " + e); }
    }
    
    
    public void shraniTabelaKat() {
    	jTabelaKat.editCellAt(0,0);	// fokus kurzorja je treba premakniti strani iz aktivne celice, èe želiš, da se vsebina celice shrani
    	for (int i = 0; i < jTabelaKat.getRowCount(); i++) {
    		naslovi_kategorij[i] = (String) jTabelaKat.getValueAt(i, 0);
    		for (int j = 0; j < jTabelaKat.getColumnCount(); j++) { 
    			kategorije[i][j] = (String) jTabelaKat.getValueAt(i, j);
    		}
    	}
    	
    	for (int i = 0; i < jTabelaKat.getRowCount(); i++) {
    		for (int j = 0; j < jTabelaKat.getColumnCount(); j++)
    			System.out.print(kategorije[i][j] + " ");
    		System.out.println();
    	}
    	
    }
    
    public void kaksenNaslov() {
    	do {
    		naslov = JOptionPane.showInputDialog(okvir, "Naslov odloèevalnega sistema: ");
    	} while (naslov != null && naslov.equals(""));	// naslov == null ==> kliknjen cancel
    	
    	if (naslov == null) {
    		preklici1();
    		return;
    	}
    }

    public void kolikoKategorij() {
    	// poizvdba koliko koliko kategorij bo uporabnik upošteval pri odloèanju
    	String st;
    	do{
            st = JOptionPane.showInputDialog(okvir, "Koliko kategorij boš imel/a?");
            try{
                st_kat = Integer.parseInt(st);
                if (st_kat == 0)
                	st_kat = -1;
            }catch (Exception e){
                continue;
            }
        }while(st != null && st_kat < 1);
     
    	if (st_kat < 1)	{// pomeni, da je bil pritisnjen cancel
    		preklici1();
    		return;
    	}
    	
    }
    
    public void initPraznaKategorije() {
		// poizvedba o številu kategorij odstranjena - max št. (int maxst) kategorij je trenutno 100
    	int maxst = 100;
    	
    	//prazna = new String[maxst][glava.length];
    	prazna = new String[1][glava.length];
    	for(String[] t : prazna) {
			t[1] = "izberi";
		}
		kategorije = new String[maxst][glava.length];
		naslovi_kategorij = new String[maxst];
		/*
    	// inicializiranje tabel prazna[][] in glava[] za JTable jTabelaKat
    	// zakaj try? èe se odloèim dati ven poizvedbo o številu kategorij (st_kat)
    	try {
    		prazna = new String[st_kat][glava.length];
    		for(String[] t : prazna) {
    			t[1] = "izberi";
    		}
        	kategorije = new String[st_kat][glava.length];
    	
    	} catch(Exception e) {
    		prazna = new String[100][glava.length];
    		for(String[] t : prazna) {
    			t[1] = "izberi";
    		}
    		kategorije = new String[100][glava.length];
    	}*/
    }
    
    public void initBesede() {
    	besede = new String [st_bes_kat][12][];
    	vstaviNaslove();
    }    

    private void vstaviNaslove() {
    	// vstavi ustrezne naslove besednih kategorij na indekse 0
		int j = 0;
    	for (int i = 0; i < kategorije.length; i++) {
    		if (kategorije[i][0] == null)	
    			continue;
    		if (kategorije[i][1].equals("besedni")) {
    			String [] naslov = {kategorije[i][0]};
    			besede[j++][0] = naslov;
    		}
    	}
    }
    
    public static void main(String[] args){
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new uppo_003().setVisible(false);
            }
        });
	}
	

    // swing objekti
    
    
    public static JFrame okvir;
	private static JPanel jZacZaslon;
	private static JPanel jPoizZaslon1;	// zaslon za poizvedbo o kategorijah
	private static JPanel jPoizZaslon2;	// zaslon za poizvedbo o kategorijah
    private static Zaslon jPoizZaslon3;
	private static JLabel jDobrodosel;
	private static JButton jUstvariNovBtn;
	private static JButton jPreglejBtn;
	private static JButton jPrekliciBtn;
	private static JButton jPotrdiBtn;
	private static JButton jPotrdi2Btn;	//ob priliki odstrani in nadomesti z jPotrdiBtn 
	private static JTable jTabelaKat;		// tabela za uporabnikov vnos kategorij
	private static JTable jTabelaBes[];	// tabela za uporabnikov vnos besednih vrednosti 
	private static Tabela jTabelaVnosna;	// tabela za uporabnikov vnos parametrov (npr.: lastnosti produkta)
	
    // globalne spremenljivke - kasneje gredo v BP
	private static String naslov;	// naslov odloèevalnega sistema
	private static String font;
	private static String glava[];
	private static String prazna[][];    
	private static String kategorije[][];
	private static String naslovi_kategorij[];
	private static String besede[][][];	// [st_bes_kat][11][] - [naziv kategorije] [moè/teža] [besede]
									// na indeksu 0 je naziv kategorije, na naslednjih desetih pa 
									// besedne vrednosti kategorije razvršèene padajoèe po teži (10->0)
	private static int st_kat;
	private static int st_bes_kat;
    private static int sirina_okna;
    private static int visina_okna;

}
